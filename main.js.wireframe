// Ensure glMatrix is available
const { mat4, vec3 } = glMatrix;

async function main() {
    // 1. SETUP: Get device and configure canvas
    //================================================================
    const canvas = document.getElementById('webgpu-canvas');
    if (!navigator.gpu) {
        throw new Error("WebGPU not supported on this browser.");
    }
    
    // *** NEW: Handle high-DPI screens ***
    const devicePixelRatio = window.devicePixelRatio || 1;
    const presentationSize = [
        canvas.clientWidth * devicePixelRatio,
        canvas.clientHeight * devicePixelRatio,
    ];
    canvas.width = presentationSize[0];
    canvas.height = presentationSize[1];

    const adapter = await navigator.gpu.requestAdapter();
    if (!adapter) {
        throw new Error("No appropriate GPUAdapter found.");
    }

    const device = await adapter.requestDevice();
    const context = canvas.getContext('webgpu');
    const canvasFormat = navigator.gpu.getPreferredCanvasFormat();
    
    context.configure({
        device: device,
        format: canvasFormat,
        alphaMode: 'premultiplied',
    });

    // 2. GEOMETRY & DATA: Define the shape of our objects
    //================================================================

    // prettier-ignore
    const cubeLineVertices = new Float32Array([
        -0.5, -0.5, -0.5, // 0
         0.5, -0.5, -0.5, // 1
         0.5,  0.5, -0.5, // 2
        -0.5,  0.5, -0.5, // 3
        -0.5, -0.5,  0.5, // 4
         0.5, -0.5,  0.5, // 5
         0.5,  0.5,  0.5, // 6
        -0.5,  0.5,  0.5, // 7
    ]);

    // prettier-ignore
    const cubeLineIndices = new Uint16Array([
        0, 1, 1, 2, 2, 3, 3, 0, // Back face
        4, 5, 5, 6, 6, 7, 7, 4, // Front face
        0, 4, 1, 5, 2, 6, 3, 7  // Connecting lines
    ]);

    const invaderShape = [
        [0,0], [3,0], [4,0], [5,0], [6,0], [9,0],
        [1,1], [2,1], [7,1], [8,1],
        [0,2], [1,2], [2,2], [3,2], [4,2], [5,2], [6,2], [7,2], [8,2], [9,2],
        [0,3], [2,3], [3,3], [4,3], [5,3], [6,3], [7,3], [9,3],
        [2,4], [7,4]
    ];
    
    const invaderInstanceData = new Float32Array(invaderShape.length * 3);
    invaderShape.forEach(([x, y], i) => {
        invaderInstanceData[i * 3 + 0] = x - 4.5;
        invaderInstanceData[i * 3 + 1] = -y + 2.0;
        invaderInstanceData[i * 3 + 2] = 0;
    });
    
    const cubeVertexBuffer = device.createBuffer({
        size: cubeLineVertices.byteLength,
        usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,
    });
    device.queue.writeBuffer(cubeVertexBuffer, 0, cubeLineVertices);

    const cubeIndexBuffer = device.createBuffer({
        size: cubeLineIndices.byteLength,
        usage: GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST,
    });
    device.queue.writeBuffer(cubeIndexBuffer, 0, cubeLineIndices);

    const invaderInstanceBuffer = device.createBuffer({
        size: invaderInstanceData.byteLength,
        usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,
    });
    device.queue.writeBuffer(invaderInstanceBuffer, 0, invaderInstanceData);
    
    // 3. SHADERS (WGSL): The code that runs on the GPU
    //================================================================
    const wireframeShaderModule = device.createShaderModule({
        label: 'Wireframe Shader',
        code: `
            struct Uniforms {
                mvpMatrix: mat4x4<f32>,
            };
            @group(0) @binding(0) var<uniform> uniforms: Uniforms;

            @vertex
            fn vertex_main(
                @builtin(instance_index) instance_index: u32,
                @location(0) position: vec3<f32>,
                @location(1) instance_offset: vec3<f32>
            ) -> @builtin(position) vec4<f32> {
                let scaled_pos = position * 1.02;
                let model_pos = scaled_pos + instance_offset;
                return uniforms.mvpMatrix * vec4<f32>(model_pos, 1.0);
            }

            @fragment
            fn fragment_main() -> @location(0) vec4<f32> {
                return vec4<f32>(1.0, 1.0, 1.0, 1.0);
            }
        `,
    });
    
    // 4. PIPELINE: Configure how the GPU draws our geometry
    //================================================================
    const depthTexture = device.createTexture({
        size: presentationSize, // Use the scaled size
        format: 'depth24plus',
        usage: GPUTextureUsage.RENDER_ATTACHMENT,
    });

    const uniformBufferSize = 16 * 4; // MVP Matrix size
    const uniformBuffer = device.createBuffer({
        size: uniformBufferSize,
        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,
    });
    
    const bindGroupLayout = device.createBindGroupLayout({
        entries: [{
            binding: 0,
            visibility: GPUShaderStage.VERTEX,
            buffer: {},
        }],
    });
    
    const bindGroup = device.createBindGroup({
        layout: bindGroupLayout,
        entries: [{
            binding: 0,
            resource: { buffer: uniformBuffer },
        }],
    });

    const invaderPipeline = device.createRenderPipeline({
        label: 'Invader Wireframe Pipeline',
        layout: device.createPipelineLayout({ bindGroupLayouts: [bindGroupLayout] }),
        vertex: {
            module: wireframeShaderModule,
            entryPoint: 'vertex_main',
            buffers: [
                {
                    arrayStride: 3 * 4,
                    attributes: [
                        { shaderLocation: 0, offset: 0, format: 'float32x3' },
                    ],
                },
                {
                    arrayStride: 3 * 4,
                    stepMode: 'instance',
                    attributes: [
                        { shaderLocation: 1, offset: 0, format: 'float32x3' },
                    ],
                },
            ],
        },
        fragment: {
            module: wireframeShaderModule,
            entryPoint: 'fragment_main',
            targets: [{ format: canvasFormat }],
        },
        primitive: { 
            topology: 'line-list',
        },
        depthStencil: {
            depthWriteEnabled: true,
            depthCompare: 'less',
            format: 'depth24plus',
        },
        multisample: {
            count: 1,
        },
    });

    // 5. RENDER LOOP: Called every frame to draw the scene
    //================================================================
    const mvpMatrix = mat4.create();
    const modelMatrix = mat4.create();
    const viewMatrix = mat4.create();
    const projectionMatrix = mat4.create();
    
    // *** MODIFIED: Use the correct aspect ratio for the projection ***
    const aspect = presentationSize[0] / presentationSize[1];
    mat4.perspective(projectionMatrix, Math.PI / 3, aspect, 0.1, 100.0);
    mat4.lookAt(viewMatrix, vec3.fromValues(0, 0, 20), vec3.fromValues(0, 0, 0), vec3.fromValues(0, 1, 0));

    let isPaused = false;
    let rotationX = 0;
    let rotationY = 0;
    let lastTime = 0;

    document.addEventListener('keydown', (event) => {
        if (event.code === 'Space') {
            isPaused = !isPaused;
            if (!isPaused) {
                requestAnimationFrame(drawFrame);
            }
        }
    });

    function drawFrame(time) {
        if (isPaused) {
            lastTime = 0;
            return;
        }
        
        if (lastTime > 0) {
            const deltaTime = (time - lastTime) / 1000;
            rotationY += deltaTime * (Math.PI / 2);
            rotationX += deltaTime * (Math.PI / 3);
        }
        lastTime = time;

        mat4.fromYRotation(modelMatrix, rotationY);
        mat4.rotateX(modelMatrix, modelMatrix, rotationX);

        mat4.multiply(mvpMatrix, viewMatrix, modelMatrix);
        mat4.multiply(mvpMatrix, projectionMatrix, mvpMatrix);

        device.queue.writeBuffer(uniformBuffer, 0, mvpMatrix);
        
        const commandEncoder = device.createCommandEncoder();
        const renderPassDescriptor = {
            colorAttachments: [{
                view: context.getCurrentTexture().createView(),
                clearValue: { r: 0.05, g: 0.05, b: 0.1, a: 1.0 },
                loadOp: 'clear',
                storeOp: 'store',
            }],
            depthStencilAttachment: {
                view: depthTexture.createView(),
                depthClearValue: 1.0,
                depthLoadOp: 'clear',
                depthStoreOp: 'store',
            },
        };
        
        const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);

        passEncoder.setPipeline(invaderPipeline);
        passEncoder.setBindGroup(0, bindGroup);
        passEncoder.setVertexBuffer(0, cubeVertexBuffer);
        passEncoder.setVertexBuffer(1, invaderInstanceBuffer);
        passEncoder.setIndexBuffer(cubeIndexBuffer, 'uint16');
        passEncoder.drawIndexed(cubeLineIndices.length, invaderShape.length, 0, 0, 0);

        passEncoder.end();
        device.queue.submit([commandEncoder.finish()]);

        requestAnimationFrame(drawFrame);
    }

    requestAnimationFrame(drawFrame);
}

main().catch(err => {
    console.error(err);
    document.body.innerHTML = `<div style="text-align: center; color: red; font-size: 1.2em; padding: 2em;">
        <h2>Error</h2><p>${err.message}</p>
        <p>Please ensure you are using a WebGPU-compatible browser (like Chrome or Edge) and that it is up-to-date.</p>
    </div>`;
});